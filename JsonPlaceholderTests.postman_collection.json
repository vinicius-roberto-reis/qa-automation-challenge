{
	"info": {
		"_postman_id": "93de8aa7-b819-4cbd-aa95-d9809c1a8600",
		"name": "JsonPlaceholderTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23880565"
	},
	"item": [
		{
			"name": "http://jsonplaceholder.typicode.com/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar se a solicitação foi bem-sucedida (status 200 OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar se o tipo de conteúdo é JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Validar se a resposta contém pelo menos um post\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar se todos os campos existem em cada post\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    jsonData.forEach(function (post) {\r",
							"        var camposEsperados = ['userId', 'id', 'title', 'body'];\r",
							"        camposEsperados.forEach(function (campo) {\r",
							"            pm.expect(post).to.have.property(campo);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Verificar o tipo de dado de userId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].userId).to.be.a('number');\r",
							"    pm.expect(Number.isInteger(jsonData[0].userId)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Verificar o tipo de dado de id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id).to.be.a('number');\r",
							"    pm.expect(Number.isInteger(jsonData[0].id)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Verificar se title é uma string não vazia\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title).to.be.a('string');\r",
							"    pm.expect(jsonData[0].title.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Verificar se body é uma string não vazia\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].body).to.be.a('string');\r",
							"    pm.expect(jsonData[0].body.length).to.be.above(0); \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verificar o cabeçalho Content-Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verificar o cabeçalho Cache-Control\", function () {\r",
							"    pm.response.to.have.header(\"Cache-Control\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://jsonplaceholder.typicode.com/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Obter a resposta da solicitação POST\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Teste para verificar o código de resposta (deve ser 201 - Created)\r",
							"pm.test(\"Verificar o código de resposta\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Teste para verificar se o campo \"id\" está presente e é um número\r",
							"pm.test(\"Verificar o campo 'id'\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	]
}